# -*- coding: utf-8 -*-
"""TitanicPrimero.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wEw9Rj98h3X-J8pYL8-o7qJ4_HjqOV1U
"""

import numpy as np
import pandas as pd
import seaborn as sns
titanic = sns.load_dataset('titanic', data_home='./')

from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
## GridSearchCV busqueda en bruto de los hiperparametros
from sklearn.metrics import classification_report, f1_score, roc_curve, roc_auc_score, confusion_matrix

df_test = pd.read_csv('test.csv') 
df_train = pd.read_csv('train.csv') 
print(df_train.info())
print(df_test.info())



print(df_train.info())
print("###############################################")
print(df_test.info())

print(pd.isnull(df_train).sum())
print("##############################")
print(pd.isnull(df_test).sum())

print(df_train.describe())
print(df_test.describe())

#Cambiar los datos de sexo por numericos binarios

df_train.Sex.replace(['female','male'],[0,1], inplace=True)
df_test.Sex.replace(['female','male'],[0,1], inplace=True)


df_train.Embarked.replace(['Q','S','C'],[0,1,2], inplace=True)
df_test.Embarked.replace(['Q','S','C'],[0,1,2], inplace=True)
print(df_train.head())
print(df_train.info())

#Datos faltantes de edad por la media y agrupar la edad por bandas 
promedioEdad=(df_train.Age.mean()+df_test.Age.mean())/2
df_train.Age=df_train.Age.replace(np.nan,promedioEdad)
df_test.Age=df_test.Age.replace(np.nan,promedioEdad)

df_train.Age=pd.cut(df_train.Age,[0,8,15,18,25,40,60,100],labels=['1','2','3','4','5','6','7'])
df_test.Age=pd.cut(df_test.Age,[0,8,15,18,25,40,60,100],labels=['1','2','3','4','5','6','7'])
print(df_train.Age)
print(df_test.Age)

#Eliminar la columna de cabina
df_test.drop(['Cabin'], axis=1,inplace=True)
df_train.drop(['Cabin'], axis=1,inplace=True)

#Eliminar las columnas que no son necesarias para el analisis
df_train=df_train.drop(['PassengerId','Name','Ticket'],axis=1)
df_test=df_test.drop(['Name','Ticket'],axis=1)

#Eliminar la filas que contienen datos faltanes
df_train.dropna(axis=0,how='any',inplace=True)
df_test.dropna(axis=0,how='any',inplace=True)
df_train.describe()

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier

X=np.array(df_train.drop(['Survived'],1))
y=np.array(df_train.Survived)
#print(X.shape)
#print(y.shape)

#Separar los datos de entrenamiento y los de prueba para aplicar los algoritmos de aprendizaje supervisado
X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2)

#Regresion Logistica
logreg= LogisticRegression()
logreg.fit(X_train, y_train)
Y_pred = logreg.predict(X_test)
print('Presisicon de la regresion logistica')
print(logreg.score(X_train, y_train))

#Maquinas de Soporte vectorial
svc =SVC()
svc.fit(X_train,y_train)
Y_pred=svc.predict(X_test)
print('Presisicon de Maquinas de sopoprte vectorial')
print(svc.score(X_train,y_train))

#vecinos mas cercanos
knn= KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train,y_train)
Y_pred=knn.predict(X_test)
print('Presisicon de K vecinos mas cercanos')
print(knn.score(X_train,y_train))

#prediccion con el dataset de prueba
id=df_test.PassengerId
prediccion_logreg=logreg.predict(df_test.drop('PassengerId', axis=1))
salida_Logreg=pd.DataFrame({'PassengerId':id, 'Survived':prediccion_logreg})
print('Preddicion regresion logistica:')
print(salida_Logreg.head())

#Prediccion con maquinas de soporte vectorial
prediccion_SVM=svc.predict(df_test.drop('PassengerId', axis=1))
salida_SVM=pd.DataFrame({'PassengerId':id, 'Survived':prediccion_SVM})
print('Preddicion Maquinas de soporte vectorial:')
print(salida_SVM.head())

#Preddicion de K Vecinos mas Cercanos 
prediccion_KVecinos=knn.predict(df_test.drop('PassengerId', axis=1))
salida_KVecinos=pd.DataFrame({'PassengerId':id, 'Prediccion K Vecinos':prediccion_KVecinos})
print('Preddicion Maquinas de soporte vectorial:')
print(salida_KVecinos.head())

titanic=titanic.rename_axis('PassengerId').reset_index()
print(pd.isnull(titanic).sum())
print('##########################################################')
print(titanic.info())
print('##########################################################')
print(titanic.head())

#Cambiar los datos de sexo por numericos binarios

titanic.sex.replace(['female','male'],[0,1], inplace=True)
titanic.embarked.replace(['Q','S','C'],[0,1,2], inplace=True)
titanic.adult_male.replace([np.True_,np.False_],[0,1], inplace=True)
titanic.alone.replace([np.True_,np.False_],[0,1], inplace=True)
titanic['class'].replace(["Third",'Second','First'],[3,2,1], inplace=True)
titanic=titanic.drop(['who','deck','alive','embark_town'],axis=1)
titanic.head()

promedioEdad=titanic.age.mean()
print(promedioEdad)

titanic.age=titanic.age.replace(np.nan,promedioEdad)
titanic.fare=pd.cut(titanic.fare, bins=[0,7.90,14.45,31.28,120], labels=[1,2,3,4])
titanic.age=pd.cut(titanic.age,[0,8,15,18,25,40,60,100],labels=[1,2,3,4,5,6,7])
titanic.head()

#Eliminar la filas que contienen datos faltanes
titanic.dropna(axis=0,how='any',inplace=True)
print(pd.isnull(titanic).sum())
print(titanic.describe())
print(titanic.head())
print(titanic.info())

#Descargados de Titanic
titanic=titanic.convert_dtypes()
print(titanic.dtypes)
train, test =train_test_split(titanic, test_size=0.3)

print(train.head())

Xi=np.array(train.drop(['survived','PassengerId'],1))
yi=np.array(train.survived)